<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[仿饿了么项目SpringBoot]]></title>
    <url>%2F2018%2F11%2F01%2F%E4%BB%BF%E9%A5%BF%E4%BA%86%E4%B9%88%E9%A1%B9%E7%9B%AESpringBoot%2F</url>
    <content type="text"><![CDATA[前端部分后补充 #后端部分摘自老师的笔记 一、环境搭建和工具 所需环境：java,mysql,tomcat 使用工具：IDEA,Navicat 二、数据库的设计表设计 类目create table `product_category` ( `category_id` int not null auto_increment, `category_name` varchar(64) not null comment &apos;类目名字&apos;, `category_type` int not null comment &apos;类目编号&apos;, `create_time` timestamp not null default current_timestamp comment &apos;创建时间&apos;, `update_time` timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;, primary key (`category_id`) ); 商品create table `product_info` ( `product_id` varchar(32) not null, `product_name` varchar(64) not null comment &apos;商品名称&apos;, `product_price` decimal(8,2) not null comment &apos;单价&apos;, `product_stock` int not null comment &apos;库存&apos;, `product_description` varchar(64) comment &apos;描述&apos;, `product_icon` varchar(512) comment &apos;小图&apos;, `product_status` tinyint(3) DEFAULT &apos;0&apos; COMMENT &apos;商品状态,0正常1下架&apos;, `category_type` int not null comment &apos;类目编号&apos;, `create_time` timestamp not null default current_timestamp comment &apos;创建时间&apos;, `update_time` timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;, primary key (`product_id`) ); 订单create table `order_master` ( `order_id` varchar(32) not null, `buyer_name` varchar(32) not null comment &apos;买家名字&apos;, `buyer_phone` varchar(32) not null comment &apos;买家电话&apos;, `buyer_address` varchar(128) not null comment &apos;买家地址&apos;, `buyer_openid` varchar(64) not null comment &apos;买家微信openid&apos;, `order_amount` decimal(8,2) not null comment &apos;订单总金额&apos;, `order_status` tinyint(3) not null default &apos;0&apos; comment &apos;订单状态, 默认为新下单&apos;, `pay_status` tinyint(3) not null default &apos;0&apos; comment &apos;支付状态, 默认未支付&apos;, `create_time` timestamp not null default current_timestamp comment &apos;创建时间&apos;, `update_time` timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;, primary key (`order_id`), key `idx_buyer_openid` (`buyer_openid`) ); 订单商品create table `order_detail` ( `detail_id` varchar(32) not null, `order_id` varchar(32) not null, `product_id` varchar(32) not null, `product_name` varchar(64) not null comment &apos;商品名称&apos;, `product_price` decimal(8,2) not null comment &apos;当前价格,单位分&apos;, `product_quantity` int not null comment &apos;数量&apos;, `product_icon` varchar(512) comment &apos;小图&apos;, `create_time` timestamp not null default current_timestamp comment &apos;创建时间&apos;, `update_time` timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;, primary key (`detail_id`), key `idx_order_id` (`order_id`) ); 卖家create table `seller_info` ( `id` varchar(32) not null, `username` varchar(32) not null, `password` varchar(32) not null, `openid` varchar(64) not null comment &apos;微信openid&apos;, `create_time` timestamp not null default current_timestamp comment &apos;创建时间&apos;, `update_time` timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;, primary key (`id`) ) comment &apos;卖家信息表&apos;; 三、Api文档商品列表 GET /sell/buyer/product/list 返回 { &quot;code&quot;: 0, &quot;msg&quot;: &quot;成功&quot;, &quot;data&quot;: [ { &quot;name&quot;: &quot;热榜&quot;, &quot;type&quot;: 1, &quot;foods&quot;: [ { &quot;id&quot;: &quot;123456&quot;, &quot;name&quot;: &quot;皮蛋粥&quot;, &quot;price&quot;: 1.2, &quot;description&quot;: &quot;好吃的皮蛋粥&quot;, &quot;icon&quot;: &quot;http://xxx.com&quot;, } ] }, { &quot;name&quot;: &quot;好吃的&quot;, &quot;type&quot;: 2, &quot;foods&quot;: [ { &quot;id&quot;: &quot;123457&quot;, &quot;name&quot;: &quot;蛋糕&quot;, &quot;price&quot;: 10.9, &quot;description&quot;: &quot;美味爽口&quot;, &quot;icon&quot;: &quot;http://xxx.com&quot;, } ] } ] } 创建订单 POST /sell/buyer/order/create 参数 name: &quot;张三&quot; phone: &quot;13333333333&quot; address: &quot;西七道&quot; openid: &quot;ew3euwhd7sjw9diwkq&quot; //用户的微信openid items: [{ productId: &quot;1423113435324&quot;, productQuantity: 2 //购买数量 }] 返回 { &quot;code&quot;: 0, &quot;msg&quot;: &quot;成功&quot;, &quot;data&quot;: { &quot;orderId&quot;: &quot;147283992738221&quot; } } 订单列表 GET /sell/buyer/order/list 参数 openid: 18eu2jwk2kse3r42e2e page: 0 //从第0页开始 size: 10 返回 { &quot;code&quot;: 0, &quot;msg&quot;: &quot;成功&quot;, &quot;data&quot;: [ { &quot;orderId&quot;: &quot;161873371171128075&quot;, &quot;buyerName&quot;: &quot;张三&quot;, &quot;buyerPhone&quot;: &quot;13333333333&quot;, &quot;buyerAddress&quot;: &quot;西七道&quot;, &quot;buyerOpenid&quot;: &quot;18eu2jwk2kse3r42e2e&quot;, &quot;orderAmount&quot;: 0, &quot;orderStatus&quot;: 0, &quot;payStatus&quot;: 0, &quot;createTime&quot;: 1490171219, &quot;updateTime&quot;: 1490171219, &quot;orderDetailList&quot;: null }, { &quot;orderId&quot;: &quot;161873371171128076&quot;, &quot;buyerName&quot;: &quot;张三&quot;, &quot;buyerPhone&quot;: &quot;13333333333&quot;, &quot;buyerAddress&quot;: &quot;西七道&quot;, &quot;buyerOpenid&quot;: &quot;18eu2jwk2kse3r42e2e&quot;, &quot;orderAmount&quot;: 0, &quot;orderStatus&quot;: 0, &quot;payStatus&quot;: 0, &quot;createTime&quot;: 1490171219, &quot;updateTime&quot;: 1490171219, &quot;orderDetailList&quot;: null }] } 查询订单详情 GET /sell/buyer/order/detail 参数 openid: 18eu2jwk2kse3r42e2e orderId: 161899085773669363 返回 { &quot;code&quot;: 0, &quot;msg&quot;: &quot;成功&quot;, &quot;data&quot;: { &quot;orderId&quot;: &quot;161899085773669363&quot;, &quot;buyerName&quot;: &quot;李四&quot;, &quot;buyerPhone&quot;: &quot;15555555555&quot;, &quot;buyerAddress&quot;: &quot;西八道&quot;, &quot;buyerOpenid&quot;: &quot;18eu2jwk2kse3r42e2e&quot;, &quot;orderAmount&quot;: 18, &quot;orderStatus&quot;: 0, &quot;payStatus&quot;: 0, &quot;createTime&quot;: 1490177352, &quot;updateTime&quot;: 1490177352, &quot;orderDetailList&quot;: [ { &quot;detailId&quot;: &quot;161899085974995851&quot;, &quot;orderId&quot;: &quot;161899085773669363&quot;, &quot;productId&quot;: &quot;157875196362360019&quot;, &quot;productName&quot;: &quot;招牌奶茶&quot;, &quot;productPrice&quot;: 9, &quot;productQuantity&quot;: 2, &quot;productIcon&quot;: &quot;http://xxx.com&quot;, &quot;productImage&quot;: &quot;http://xxx.com&quot; } ] } } 取消订单 POST /sell/buyer/order/cancel 参数 openid: 18eu2jwk2kse3r42e2e orderId: 161899085773669363 返回 { &quot;code&quot;: 0, &quot;msg&quot;: &quot;成功&quot;, &quot;data&quot;: null } 获取openid 重定向到 /sell/wechat/authorize 参数 returnUrl: http://xxx.com/abc //【必填】 返回 http://xxx.com/abc?openid=oZxSYw5ldcxv6H0EU67GgSXOUrVg 支付订单 重定向 /sell/pay/create 参数 orderId: 161899085773669363 returnUrl: http://xxx.com/abc/order/161899085773669363 返回 http://xxx.com/abc/order/161899085773669363 买家类目###一、dao层需要的方法根据categoryType的集合来查询 ###二、service需要的方法根据id查询查询所有根据categoryType的集合来查询新增和更新 商品一、dao层需要的方法根据商品状态来查询 二、service层需要的方法根据id查询查询所有上架商品查询所有商品（给管理端使用，需要包含分页）增加和修改方法 三、买家端API的开发提供一个查询所有商品和类别的api接口（需要重新包装数据）]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>springboot,nginx,node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot]]></title>
    <url>%2F2018%2F10%2F29%2Fspringboot%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[SpringBoot项目的构建有三种方式：一、手动构建利用maven构建一个普通的项目，我们手动去加入依赖。 1.在pom中引入父pom,代码如下&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.17.RELEASE&lt;/version&gt; &lt;/parent&gt; 2.引入SpringBoot依赖，代码如下&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; 3.加入编译插件&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 4.写一个启动类@Controller //可以帮助SpringBoot应用将所有符合条件的@Configuration配置 都加载到当前SpringBoot创建并使用的IoC容器。 @EnableAutoConfiguration public class BootStarter { //servlet映射地址 @RequestMapping(&quot;/hello&quot;) //返回json格式的数据 @ResponseBody public String hello(){ return &quot;hello world&quot;; } public static void main(String[] args) { // SpringApplication.run(BootStarter.class,args); } } 5.运行main方法，在地址栏访问localhost:8080/hello . ____ _ __ _ _ /\\ / ___&apos;_ __ _ _(_)_ __ __ _ \ \ \ \ ( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) &apos; |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v1.5.17.RELEASE) 启动成功！ 二、Spring官网Spring官网为我们提供了生成项目的方式访问https://start.spring.io/根据提示填写，下载解压使用IDEA将项目打开 三、利用IDEA工具新建项目直接选择Spring Initializr就可以生成一个Spring Boot项目（常用）。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于node.jshexo,github搭建博客]]></title>
    <url>%2F2018%2F10%2F29%2Fhello-my-blog%2F</url>
    <content type="text"><![CDATA[基于 node.js+hexo+github 搭建一个属于自己的博客！ 前言&emsp;&emsp;从买阿里云服务器开始说起，开始研究服务器到底能做什么，最开始了解到云服务器可以是一台24小时运行的电脑，并且拥有自己的IP，就想着先把做的仿饿了么外卖项目放到服务器上运行，经过无数的踩坑，从linux系统都不会进到后面的关防火墙，配置安全组。再到搭建Node.js环境，git环境，连接github，终于让项目跑起来。再开始想怎样实现员工管理系统也能在服务器上运行，又开始配置JDK，Mysql，Tomcat环境，最后几经周折也实现了（虽然还有）一些BUG。 &emsp;&emsp;通过阿里云，又了解了域名相关，就想着自己是不是可以拥有一个属于自己的域名，比如说自定义的博客，也可以在服务器上跑（不能让它闲着–！），就开始在网上搜寻相关的知识。开始真的是一头雾水，别人是一步一个脚印，我感觉我是一步一个坑，最后摸索出用node.js+hexo+github 就可以实现我想要的结果，不容易不容易。 正题配置环境我们需要配置所需要的工具node.js+hexo+github这里就暂时不做过多解释，只给出检测的方法。在一个空文件夹下，右键Git Bash here node -version npm -version git -version 都能显示版本说明我们可以开始搭建了。 hexo初始化我们需要一个官方默认的hexo主题，在Git界面执行以下命令 hexo init 这是遇到的一个大坑，几KB每秒的下载速度，最后还卡住了，果断扔到服务器上下载。我上传到百度网盘，可以下载，下载后不需要执行上面的代码。 链接：https://pan.baidu.com/s/1QZSevQU6zkvJ55DnFUWQMQ提取码：m67r 接下来我们需要配置hexo和node依赖的包 npm install 这时我们可以查看hexo是否初始化 hexo -version 显示版本就说明hexo可以使用。 git部分git这部分，我们需要将此文件夹下的文件利用下面的代码先推到git中 git init git add -A git commit -m &quot;提交&quot; git remote add origin &quot;你的github仓库&quot; 这里需要注意的是：不要往仓库上推，仓库存的不是这部分文件，而是一些静态资源文件，比如html、css和js文件。 hexo主题生成清理静态资源文件 hexo clean 生成静态资源文件 hexo g 部署项目，通过localhost:4000访问 hexo s 页面出现Hexo，此时就说明成功了&emsp;&emsp;接下来的就比较简单了，打开hexo下的_config.yml文件，这个文件包含了hexo的站点配置，在最下方需要添加代码 deploy: type: git repo: &quot;这里填写你的github仓库&quot; branch: master &emsp;&emsp;这个时候千万不要用git pull或者git push等命令！应该使用 hexo clean hexo g hexo d hexo d这个命令就可以把你的项目提交到你的github仓库中。 github网址生成&emsp;&emsp;github对我们很友好（吐槽下真的很慢），为我们提供了一个功能，生成了一个网址可以展示仓库中的项目，但这个功能需要手动开启，打开我们的github，找到对应的仓库，找到Setting选项下的GitHub Pages，选择Source中你项目的分支，一般是主分支。实在不行开个翻译，很好找，点击保存后，这样就会显示一个网址，这样就可以访问了。注意：项目名需要xxx.github.io的格式，还需要在_config.yml中找到以下代码。 url: &quot;你生成的网址&quot; root: /项目名 结束语&emsp;&emsp;仔细回想一下，其实挺简单的，主要是什么都不知道，还有没想到的以后再进行补充，欢迎留言评论。]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
